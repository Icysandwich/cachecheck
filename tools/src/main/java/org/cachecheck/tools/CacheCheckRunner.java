package org.cachecheck.tools;

import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.Arrays;

public class CacheCheckRunner {
	public static void main( String[] args ) throws Exception
    {
		ArrayList<String> argList = new ArrayList<String>(Arrays.asList(args));
		String usage = "An example: java -jar tools-cachecheckrunner.jar $TraceDir \r\n"
				+ "$TraceDir is the directory of traces generated by instrumented Spark.\r\n";
		if(argList.contains("-h") || argList.contains("help")) {
			System.out.println("Welcome to use CacheCheckRunner! \r\n"
					+ "CacheCheckRunner will analysis all the traces in this dir and output the bug reports. \r\n"
					+ usage);
			System.exit(0);
		} else if(argList.size() != 1) {
			System.out.println("Wrong arguments! \r\n" + usage);
			System.exit(-1);
		}
    	String workspace = args[0];
        File dir = null;
        if(workspace != null) {
        	dir = new File(workspace);
        }
        if(dir.exists() && dir.isDirectory()) {
        	File[] traces = dir.listFiles(new FilenameFilter() {
				@Override
				public boolean accept(File dir, String name) {
					// TODO Auto-generated method stub
					return name.endsWith(".job");
				}
			});
        	for (File trace : traces) {
        		String jobFileName = trace.getName();
				String appName = jobFileName.substring(0, jobFileName.indexOf(".job"));
	        	System.out.println("========== Begin to analyze traces of example "+ appName + "==========");
	        	String[] cachecheckArgs = {workspace, appName};
	        	org.cachecheck.core.App.main(cachecheckArgs);
	        	System.out.println("========== End analyzing "+ appName + "==========");
			}
        }
    }
}
